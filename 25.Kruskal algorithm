#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

#define MAX_VERTICES 100
struct Edge {
    int src;
    int dest;
    int weight;
};

struct Graph {
    int numVertices;
    int numEdges;
    struct Edge edges[MAX_VERTICES];
};
void initializeGraph(struct Graph* graph, int numVertices) {
    graph->numVertices = numVertices;
    graph->numEdges = 0;
}

void addEdge(struct Graph* graph, int src, int dest, int weight) {
    graph->edges[graph->numEdges].src = src;
    graph->edges[graph->numEdges].dest = dest;
    graph->edges[graph->numEdges].weight = weight;
    graph->numEdges++;
}

int compareEdges(const void* a, const void* b) {
    return ((struct Edge*)a)->weight - ((struct Edge*)b)->weight;
}

int findParent(int parent[], int vertex) {
    if (parent[vertex] == -1)
        return vertex;
    return findParent(parent, parent[vertex]);
}

void kruskal(struct Graph* graph) {

    qsort(graph->edges, graph->numEdges, sizeof(struct Edge), compareEdges);

    int parent[MAX_VERTICES]; 
    for (int i = 0; i < graph->numVertices; i++) {
        parent[i] = -1; 
    }

    struct Edge mst[MAX_VERTICES]; 
    int mstCount = 0; 

    for (int i = 0; i < graph->numEdges; i++) {
        int srcParent = findParent(parent, graph->edges[i].src);
        int destParent = findParent(parent, graph->edges[i].dest);
        if (srcParent != destParent) {
            mst[mstCount++] = graph->edges[i];
            parent[srcParent] = destParent; 
        }
    }
    printf("Minimum Spanning Tree:\n");
    for (int i = 0; i < mstCount; i++) {
        printf("%d -- %d : %d\n", mst[i].src, mst[i].dest, mst[i].weight);
    }
}
int main() {
    struct Graph graph;
    int numVertices = 4;
    initializeGraph(&graph, numVertices);
    addEdge(&graph, 0, 1, 10);
    addEdge(&graph, 0, 2, 6);
    addEdge(&graph, 0, 3, 5);
    addEdge(&graph, 1, 3, 15);
    addEdge(&graph, 2, 3, 4);

    kruskal(&graph);
    return 0;
}
