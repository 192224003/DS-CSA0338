#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#define MAX_VERTICES 100
struct Node {
    int vertex;
    struct Node* next;
};
struct Graph {
    struct Node* adjList[MAX_VERTICES];
    bool visited[MAX_VERTICES];
};
struct Node* createNode(int vertex) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->vertex = vertex;
    newNode->next = NULL;
    return newNode;
}
void initializeGraph(struct Graph* graph) {
    for (int i = 0; i < MAX_VERTICES; i++) {
        graph->adjList[i] = NULL;
        graph->visited[i] = false;
    }
}
void addEdge(struct Graph* graph, int src, int dest) {
    struct Node* newNode = createNode(dest);
    newNode->next = graph->adjList[src];
    graph->adjList[src] = newNode;
    newNode = createNode(src);
    newNode->next = graph->adjList[dest];
    graph->adjList[dest] = newNode;
}
void BFS(struct Graph* graph, int startVertex) {
    int queue[MAX_VERTICES];
    int front = -1;
    int rear = -1;
    queue[++rear] = startVertex;
    graph->visited[startVertex] = true;

    while (front < rear) {
    
        int currentVertex = queue[++front];
        printf("%d ", currentVertex);

        
        struct Node* temp = graph->adjList[currentVertex];
        while (temp) {
            int adjVertex = temp->vertex;
            if (!graph->visited[adjVertex]) {
                queue[++rear] = adjVertex;
                graph->visited[adjVertex] = true;
            }
            temp = temp->next;
        }
    }
}

int main() {
    struct Graph graph;
    initializeGraph(&graph);
    addEdge(&graph, 0, 1);
    addEdge(&graph, 0, 2);
    addEdge(&graph, 1, 2);
    addEdge(&graph, 2, 0);
    addEdge(&graph, 2, 3);
    addEdge(&graph, 3, 3);

    int startVertex = 2; 
    printf("Breadth-First Search (BFS) Traversal starting from vertex %d:\n", startVertex);
    BFS(&graph, startVertex);
    printf("\n");
    return 0;
}
